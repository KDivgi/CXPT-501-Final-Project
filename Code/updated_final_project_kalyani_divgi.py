# -*- coding: utf-8 -*-
"""Final Project - Kalyani Divgi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pIQj4qH_YwpSn7-PuXeqooiKwbvxuK_1

Setting up Github repo structure
"""

# Commented out IPython magic to ensure Python compatibility.
# #creating .gitignore
# %%bash
# cat > .gitignore
# .*
# .gitignore

# Commented out IPython magic to ensure Python compatibility.
# #converting content folder into github repo
# %%bash
# git init

# Commented out IPython magic to ensure Python compatibility.
# #removing the sample_data subfolder
# %%bash
# rm -r sample_data

# Commented out IPython magic to ensure Python compatibility.
# #creating a high-level README
# %%bash
# cat > README.md
# This repository has been created towards the completion of the Final Individual Project for CXPT 501 Biomedical Datascience.
# This project involves the application of tools and techniques of python, its data visualization and analysis libararies, and biostatistics to clean, visualize, and analyze
# data from a subset of the PIONEER-HF study dataset.
# 
# Study:    Comparison of Sacubitril/â€‹Valsartan Versus Enalapril on Effect on NT-proBNP in Patients Stabilized From an Acute Heart Failure Episode. (PIONEER-HF)
# CTG link: https://clinicaltrials.gov/study/NCT02554890
# This study investigates the effect of combination treatment initiation with sacubitril/valsartan compared to enalapril on time averaged proportional change in NT-proBNP.
# The sample are patients who have been stabilized after hospitalization for acute decompensated heart failure and reduced ejection fraction.
# 
# Subfolders include:
# 1. Starting_Data - Contains the data saved as .csv files. DataFrames created after cleaning and removal of patients who do not meet Inclusion Critera are included.
# 2. Figures - Contains all generated figures.
# 3. Statistics - Contains all analyses conducted on the cleaned data.
# 4. Code - Contains the code used for visualization and analysis.

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# mkdir Starting_Data
# mkdir Figures
# mkdir Statistics
# mkdir Code

"""Importing libraries, loading data and setting up a clean dataframe for analysis"""

#importing relevant libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import scipy.stats as stats

#defining filepaths
#dataset GitHub direct link
datasetinpath = 'https://raw.githubusercontent.com/Mangul-Lab-USC/CXPT-501-Fall_23/main/Kalyani_Divgi.csv'
rawoutput = '/content/Starting_Data/Rawdata.csv'
cleandatapath = '/content/Starting_Data/NaNsremoved.csv'
ICdatapath = '/content/Starting_Data/DataincludedperIC.csv'

#importing the full dataset from GitHub direct link and saving it to a dataframe 'rawdf'
rawdf = pd.read_csv(datasetinpath)

#visualizing the start of the dataset
rawdf.head()

#visualizing the end of the dataset
rawdf.tail()

#checking data types
rawdf.dtypes

#checking NaNs
rawdf.isnull().sum()

#saving raw dataframe
rawdf.to_csv(rawoutput)

#removing NaN values by dropping all rows with any NaN values and saving it to a new dataframe 'cleandf'
cleandf = rawdf.dropna(how='any')
cleandf.isnull().sum()

#saving cleaned data for reference
cleandf.to_csv(cleandatapath)

#stating how many records were removed for missing data
NaNremoved = len(rawdf) - len(cleandf)
clean = len(cleandf)
print(NaNremoved, 'records were excluded due to missing data')
print()
print(clean, 'complete records remain and are assessed against Inclusion Criteria')

#selecting data based on inclusion criteria
#1 create a subset of columns that form the inclusion criteria 'Icriteria'
Icriteria = ['Age','Pre-treatment NT-proBNP (pg/mL)','Pre-treatment BNP (pg/mL)','Left ventricular ejection fraction (%)']

#2 create a for loop that will go through each inclusion criteria column and clean it according to the conditions provided in the nested if loops

'''
The inclusion criteria are as follows:

  age >= 18
  pre-treatment NT-proBNP >= 1600 pg/mL
  pre-treatment BNP >= 400 pg/mL
  left ventricular ejection fraction <= 40%
'''


#2a assigning the number of iterations for the loop based on length of 'Icriteria'
for IC in range(0,len(Icriteria)):

  #assigning condition for age based on inclusion cutoffs
  if Icriteria[IC] == 'Age':
    #saving selected data to a new dataset based on IC
    cleandf2 = cleandf.loc[cleandf['Age'] >= 18.0]
    #assigning the number of entries removed based on IC to a variable
    exclude1 = len(cleandf) - len(cleandf2)
    #printing the number of entries removed for this particular IC
    print(exclude1, 'patients have been excluded for not being 18 years or older')
    #printing a space for readability
    print()

  #assigning condition for N-terminal pro b-type natriuretic peptide levels based on inclusion criteria
  elif Icriteria[IC] == 'Pre-treatment NT-proBNP (pg/mL)':
    cleandf3 = cleandf2.loc[cleandf2['Pre-treatment NT-proBNP (pg/mL)'] >= 1600]
    exclude2 = len(cleandf2) - len(cleandf3)
    print(exclude2, 'patients have been excluded for not having Pre-treatment NT-proBNP >= 1600 pg/mL')
    print()

  #assigning condition for b-type natriuretic peptide levels based on inlcusion criteria
  elif Icriteria[IC] == 'Pre-treatment BNP (pg/mL)':
    cleandf4 = cleandf3.loc[cleandf3['Pre-treatment BNP (pg/mL)'] >= 400]
    exclude3 = len(cleandf3)-len(cleandf4)
    print(exclude3, 'patients have been excluded for not having Pre-treatment BNP >= 400 pg/mL')
    print()

  #assigning condition for left ventricular ejection fraction % based on inclusion criteria
  elif Icriteria[IC] == 'Left ventricular ejection fraction (%)':
    cleandf5 = cleandf4.loc[cleandf4['Left ventricular ejection fraction (%)'] <= 40]
    exclude4 = len(cleandf4) - len(cleandf5)
    print(exclude4, 'patients have been excluded for not having Left ventricular ejection fraction <= 40%')
    print()

#2b creating an explicit copy of the cleaned dataframe to avoid 'SettingWithCopyWarning' and unexpected changes to the dataset during analysis
cleandf5 = cleandf5.copy()

#2c printing final number of patients excluded
totexclude = len(cleandf) - len(cleandf5)
print(totexclude, 'patients were excluded on the basis of predefined inclusion criteria')
print()

#3 Confirming how many patients remain
remaining = len(cleandf5)
print(remaining, 'patients meet inclusion criteria and are included in the analysis')

#4 adding a BMI column
'''
The BMI calculation is:
weight (kg)/(height(m)**2)
'''
cleandf5.loc[:, 'BMI'] = cleandf5['Weight (kg)']/((cleandf5['Height (cm)']/100)**2)

#saving data to csv
cleandf5.to_csv(ICdatapath)

"""Splitting data by columns containing numeric and categorical data for ease of analysis and visualization"""

#retrieving column data types
coltypes1 = cleandf5.dtypes

#creating a list of all column types
coltypes2 = coltypes1.to_list()
coltypes2

#saving the columns to a list 'Tcolumns'
Tcolumns = cleandf5.columns.tolist()
Tcolumns

#creating empty lists to which columns with numeric and categoric data will be saved
#empty list for columns containing numeric data
numcol = []
#empty list for columns containing categorical data
catcol = []

#checking the datatypes of each column and assigning them to a list of either numeric or categorical data containing columns
for each in range(0,len(coltypes2)):
  #condition for the column type being dtype 'O' or object, i.e., categorical
  if coltypes2[each] == 'O':
    catcol.append(Tcolumns[each])
  #condition for the column type being, not an object, i.e., dtype 'float64', i.e., numeric
  else:
    numcol.append(Tcolumns[each])

#checking list of numeric data containing columns
numcol

#checking list of categorical data containing columns
catcol

"""Visualizing baseline NT-proBNP and BNP among different categories of patients"""

#setting contexts and styles for plots. This style and context applies to all plots/figures
sns.despine()
sns.set(style='darkgrid')

#setting context
sns.set_context('paper')

#creating a base for two plots in the same figure
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 5))

#checking differences in pre-treatment N-terminal pro b-type natriuretic peptide between males and females in each treatment group
ax1 = sns.violinplot(data=cleandf5, x='Sex', y='Pre-treatment NT-proBNP (pg/mL)', hue='Group', palette='colorblind',
                    split=True, scale='count', inner='quartile', ax=axes[0])
ax1.legend(title='Treatment Group', loc='upper center')
ax1.set_title('Fig.1.a. Pre-treatment NT-proBNP', fontsize=12)

#checking difference in pre-treatment BNP between males and females in each treatment group
ax2 = sns.violinplot(data=cleandf5, x='Sex', y='Pre-treatment BNP (pg/mL)', hue='Group', palette='colorblind',
                    split=True, scale='count', inner='quartile', ax=axes[1])
ax2.legend(title='Treatment Group', loc='upper center')
ax2.set_title('Fig.1.b. Pre-treatment BNP', fontsize=12)

fig.suptitle('Fig.1. Comparison of pre-treatment NT-proBNP and BNP in males and females by treatment group', fontsize=16, y=1)

plt.savefig('/content/Figures/Pretreatment_NTproBNP,BNP_sex_group.pdf', bbox_inches='tight')

#checking differences in pre-treatment NT-BNP and BNP based on prior ACEi/ARP use in each treatment group

#setting context
sns.set_context('paper')

#creating a base for two plots
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 5))

#checking for difference in pre-treatment NT-BNP
ax3 = sns.boxplot(data=cleandf5, x='Prior use of ACEi/ARB', y='Pre-treatment NT-proBNP (pg/mL)', hue='Group', palette='colorblind',
                  ax=axes[0], zorder=5, showfliers = False, boxprops={'edgecolor':'black','facecolor':(1,1,1,0)})
sns.stripplot(data=cleandf5, x='Prior use of ACEi/ARB', y='Pre-treatment NT-proBNP (pg/mL)', hue='Group', palette='colorblind', ax=axes[0],
              alpha=0.5, dodge=True, jitter=0.3, zorder=1)
handles3, labels3 = ax3.get_legend_handles_labels()
labels3 = ['Enalapril','Sacubitril-valsartan']
ax3.legend(handles3, labels3, title='Treatment Group', loc='upper right', bbox_to_anchor=(1,1))
ax3.set_title('Fig.2.a. Pre-treatment NT-proBNP', fontsize=12)

#checking for differences in pre-treatment BNP
ax4 = sns.boxplot(data=cleandf5, x='Prior use of ACEi/ARB', y='Pre-treatment BNP (pg/mL)', hue='Group', palette='colorblind',
                  ax=axes[1], zorder=5, showfliers = False, boxprops={'edgecolor':'black','facecolor':(1,1,1,0)})
sns.stripplot(data=cleandf5, x='Prior use of ACEi/ARB', y='Pre-treatment BNP (pg/mL)', hue='Group', palette='colorblind', ax=axes[1],
              alpha=0.5, dodge=True, jitter=0.3, zorder=1)
handles4, labels4 = ax4.get_legend_handles_labels()
labels4 = ['Enalapril','Sacubitril-valsartan']
ax4.legend(handles4, labels4, title='Treatment Group', loc='upper right', bbox_to_anchor=(1,1))
ax4.set_title('Fig.2.b. Pre-treatment BNP', fontsize=12)

fig.suptitle('Fig.2. Comparison of pre-treatment NT-proBNP and BNP by prior use of ACEi/ARB by treatment group', fontsize=16, y=1)

plt.savefig('/content/Figures/Pretreatment_NTproBNP,BNP_ACEi_group.pdf', bbox_inches='tight')

"""Exploring the efficacy of sacubitril/valsartan and enalapril at 4 weeks and 8 weeks"""

#creating a dataframe of baseline/ pre-treatment:
baselinedf = cleandf5[['Pre-treatment NT-proBNP (pg/mL)','Group']]

#creating an explicit copy
baselinedf = baselinedf.copy()

#adding timepoint column
baselinedf['Timepoint'] = 'baseline'

baselinedf

#creating a dataframe for week 4 NT-proBNP:
week4df = cleandf5[['Week 4 NT-proBNP (pg/mL)', 'Group']]

#creating explicit copy
week4df = week4df.copy()

#adding timepoint column
week4df['Timepoint'] = 'week 4'
week4df

#creating a dataframe for week 8 NT=proBNP
week8df = cleandf5[['Week 8 NT-proBNP (pg/mL)', 'Group']]

#creating an explicit copy
week8df = week8df.copy()

#adding timepoint column
week8df['Timepoint'] = 'week 8'
week8df

#creating a list of dataframes to merge
frames = [baselinedf, week4df, week8df]

#mergind the three ntprobnp dataframes at different timepoints into a single dataframe using .concat()
ntprobnpdf = pd.concat(frames)
ntprobnpdf

#Replacing all NaNs with 0.0
ntprobnpdf2 = ntprobnpdf.fillna(0)
ntprobnpdf2

#creating a new column that will store all NT-proBNP values at all three timepoints
ntprobnpdf2['NT-proBNP (pg/mL)'] = 0

#resetting index to avoid indexing errors
ntprobnpdf2.reset_index(drop=True, inplace=True)
ntprobnpdf2

#adding baseline NT-proBNP values to the the NT-proBNP column
ntprobnpdf2.loc[ntprobnpdf2['Pre-treatment NT-proBNP (pg/mL)'] > 0, 'NT-proBNP (pg/mL)'] = ntprobnpdf2['Pre-treatment NT-proBNP (pg/mL)']

#adding week 4 NT-proBNP values to the the NT-proBNP column
ntprobnpdf2.loc[ntprobnpdf2['Week 4 NT-proBNP (pg/mL)'] > 0, 'NT-proBNP (pg/mL)'] = ntprobnpdf2['Week 4 NT-proBNP (pg/mL)']

#adding week 8 NT-proBNP values to the the NT-proBNP column
ntprobnpdf2.loc[ntprobnpdf2['Week 8 NT-proBNP (pg/mL)'] > 0, 'NT-proBNP (pg/mL)'] = ntprobnpdf2['Week 8 NT-proBNP (pg/mL)']

ntprobnpdf2

#setting context
sns.set_context('paper')

#plotting the NT-proBNP levels against time, split by treatment group to visualize differences in NT-proBNP reduction by group
ax5 = sns.lineplot(data=ntprobnpdf2, x='Timepoint', y='NT-proBNP (pg/mL)', hue='Group', palette='Set1' , errorbar='sd', err_style='bars', marker='o')
ax5.set_title('Fig.3. NT-proBNP levels at 4 and 8 weeks after treatment initiation')

ax5.legend(title='Treatment Group', loc='upper right')

plt.savefig('/content/Figures/ntprobnpchange_4_8weeks.pdf', bbox_inches='tight')

"""Exploring the efficacy of sacubitril/valsartan and enalapril by BMI ranges"""

'''
BMI ranges are defined as:
underweight - < 18.5
healthy weight - 18.5-24.9
overweight - 25.0-29.9
obese - > 30.0
'''
#creating a subset of data for analysis
heatmapdf = cleandf5[['Group', 'BMI', 'Week 8 NT-proBNP (pg/mL)']]

#creating an explicit copy
heatmapdf = heatmapdf.copy()

#creating a column for BMI categories
heatmapdf.loc[heatmapdf['BMI'] < 18.5, 'BMI group'] = 'underweight (BMI<18.5)'
heatmapdf.loc[(heatmapdf['BMI'] >= 18.5) & (heatmapdf['BMI'] < 25), 'BMI group'] = 'healthy (18.5<BMI<25)'
heatmapdf.loc[(heatmapdf['BMI'] >= 25) & (heatmapdf['BMI'] < 29.9), 'BMI group'] = 'overweight (25<BMI<30)'
heatmapdf.loc[heatmapdf['BMI'] >= 30, 'BMI group'] = 'obese (BMI>30)'

heatmapdf

#grouping data for analysis
heatgroup = heatmapdf.groupby(['BMI group', 'Group']).mean()
heatgroup.reset_index(drop=False, inplace=True)
heatgroup

#pivoting for a matrix
groupmatrix = heatgroup.pivot('BMI group', 'Group', 'Week 8 NT-proBNP (pg/mL)')
groupmatrix

#setting context
sns.set_context('notebook')

#plotting heatmap
ax6 = sns.heatmap(data=groupmatrix, annot=True, cmap='crest', cbar_kws={'label': 'NT-proBNP (pg/mL) at 8 weeks'})
ax6.set_title('Fig.4. NT-proBNP levels at 8 weeks after treatment initiation')

plt.savefig('/content/Figures/ntprobnpchange_8weeks_heatmap.pdf', bbox_inches='tight')

"""Statistical analysis: </br>
Median, mean, standard deviation by treatment group
"""

#creating a subset of data including only continuous data
statdf = cleandf5[['Group', 'Age', 'Height (cm)', 'Weight (kg)', 'Pre-treatment NT-proBNP (pg/mL)', 'Week 4 NT-proBNP (pg/mL)', 'Week 8 NT-proBNP (pg/mL)', 'Pre-treatment BNP (pg/mL)', 'Left ventricular ejection fraction (%)', 'BMI']]

statdf2 = statdf.groupby('Group').agg(['median','mean','std'])
statdf2.to_csv('/content/Statistics/median_mean_std_treatmentgroup.csv')

"""Hypothesis testing (1):

H0: there is no difference between pre-treatment and week 4 NT-proBNP levels in the group treated with sacubitril-valsartan </br>
H1: There is a difference between pre-treatment and week 4 NT-proBNP levels in the group treated with sacubitril-valsartan
"""

#creating a subset of the data for the sacubitril-valsartan group
h1df = statdf.loc[statdf['Group']=='Sacubitril-valsartan'][['Age', 'Pre-treatment NT-proBNP (pg/mL)','Week 4 NT-proBNP (pg/mL)', 'Week 8 NT-proBNP (pg/mL)']].copy()

"""Outliers: </br>
Since this is a sample that has been selected through strict inclusion criteria, we will assume that outliers are a result of natural variation and not confounding factors. </br>
Therefore, outliers will not be removed for analysis.
"""

'''
Analysing using paired t-test as large sample size meets CLT requirement for assuming normality in the delta / difference between baseline and week 4
'''
#using two sided as hypothesis states difference broadly
stat1, pvalue1 = stats.ttest_rel(h1df['Week 4 NT-proBNP (pg/mL)'], h1df['Pre-treatment NT-proBNP (pg/mL)'])

#saving the results
result1 = pd.DataFrame({'Statistic':[stat1], 'P-value':[pvalue1]})
result1.to_csv('/content/Statistics/result1.csv')

"""Result 1 : </br>
In sacubitril group, the NT-proBNP levels were significantly different at baseline and week 4.

The test statistic suggests that the week 4 levels were significantly lower than baseline
_____________

Hypothesis testing (2): </br>
H0: there is no difference between pre-treatment and week 8 NT-proBNP levels in the group treated with sacubitril-valsartan </br>
H1: There is a difference between pre-treatment and week 8 NT-proBNP levels in the group treated with sacubitril-valsartan

Outliers: </br>
Since this is a sample that has been selected through strict inclusion criteria, we will assume that outliers are a result of natural variation and not confounding factors. </br>
Therefore, outliers will not be removed for analysis.
"""

'''
Analysing using paired t-test as large sample size meets CLT requirement for assuming normality in the delta / difference between baseline and week 8
'''
#using two sided as hypothesis states difference broadly
stat2, pvalue2 = stats.ttest_rel(h1df['Week 8 NT-proBNP (pg/mL)'], h1df['Pre-treatment NT-proBNP (pg/mL)'])

#saving the results
result2 = pd.DataFrame({'Statistic':[stat2], 'P-value':[pvalue2]})
result2.to_csv('/content/Statistics/result2.csv')

"""Result 2: </br>
In sacubitril group, the NT-proBNP levels were significantly different at baseline and week 8. The test statistic suggests that the week 8 levels were significantly lower than baseline
______________________________

Hypothesis testing (3): </br>
H0: there is no difference between pre-treatment and week 4 NT-proBNP levels in the group treated with enalapril </br>
H1: There is a difference between pre-treatment and week 4 NT-proBNP levels in the group treated with enalapril
"""

#creating a subset of data for the enalapril group
h3df = statdf.loc[statdf['Group']=='Enalapril'][['Age', 'Pre-treatment NT-proBNP (pg/mL)','Week 4 NT-proBNP (pg/mL)', 'Week 8 NT-proBNP (pg/mL)']].copy()

"""Outliers: </br>
Since this is a sample that has been selected through strict inclusion criteria, we will assume that outliers are a result of natural variation and not confounding factors. </br>
Therefore, outliers will not be removed for analysis.
"""

'''
Analysing using paired t-test as large sample size meets CLT requirement for assuming normality in the delta / difference between baseline and week 4
'''
#using two sided as hypothesis states difference broadly
stat3, pvalue3 = stats.ttest_rel(h3df['Week 4 NT-proBNP (pg/mL)'], h3df['Pre-treatment NT-proBNP (pg/mL)'])

#saving results
results3 = pd.DataFrame({'Statistic':[stat3], 'P-value':[pvalue3]})
results3.to_csv('/content/Statistics/result3.csv')

"""Result 3: </br>
In enalapril group, the NT-proBNP levels were significantly different at baseline and week 4. The test statistic suggests that the week 4 levels were significantly lower than baseline
_______________________________

Hypothesis testing (4): </br>
H0: there is no difference between pre-treatment and week 8 NT-proBNP levels in the group treated with enalapril </br>
H1: There is a difference between pre-treatment and week 8 NT-proBNP levels in the group treated with enalapril

Outliers: </br>
Since this is a sample that has been selected through strict inclusion criteria, we will assume that outliers are a result of natural variation and not confounding factors. </br>
Therefore, outliers will not be removed for analysis.
"""

'''
Analysing using paired t-test as large sample size meets CLT requirement for assuming normality in the delta / difference between baseline and week 4
'''
#using two sided as hypothesis states difference broadly
stat4, pvalue4 = stats.ttest_rel(h3df['Week 8 NT-proBNP (pg/mL)'], h3df['Pre-treatment NT-proBNP (pg/mL)'])

#saving results
results4 = pd.DataFrame({'Statistic':[stat4], 'P-value':[pvalue4]})
results4.to_csv('/content/Statistics/result4.csv')

"""Result 4: </br>
In enalapril group, the NT-proBNP levels were significantly different at baseline and week 8. The test statistic suggests that the week 8 levels were significantly lower than baseline
______________________

Hypothesis testing (5): </br>
H0: there is no significant difference between the 4 week NT-proBNP levels between the enalapril and saculbitril-valsartan groups </br>
H1: there is a significant difference between the 4 week NT-proBNP levels between the enalapril and saculbitril-valsartan groups
"""

'''
segregating data in group 1 - enalapril and group 2 - sacubitril-valsartan
'''

#enalapril group:
group1 = h3df['Week 4 NT-proBNP (pg/mL)']

#sacubitril-valsartan group:
group2 = h1df['Week 4 NT-proBNP (pg/mL)']

#conducting levene test to assess equality of variance between the two groups
stats.levene(group1, group2)

"""Outliers: </br>
Since this is a sample that has been selected through strict inclusion criteria, we will assume that outliers are a result of natural variation and not confounding factors. </br>
Therefore, outliers will not be removed for analysis.
"""

'''
Sample size is large enough to meet requirements of CLT and therefore, we will assume noramlity in the both groups.
Therefore, we will proceed with a parametric test

Levene test results suggest that the variances between the two groups are not equal.
Therefore we will proceed with the Welch's T test instead of standard independent T test
'''

#using two sided as hypothesis states difference broadly
stat5, pvalue5 = stats.ttest_ind(group1, group2, equal_var=False)

#checking one sided
stats.ttest_ind(group1, group2, alternative='greater', equal_var=False)

#saving results
results5 = pd.DataFrame({'Statistic':[stat5], 'P-value':[pvalue5]})
results5.to_csv('/content/Statistics/result5.csv')

"""Result 5: </br>
The NT-proBNP levels at week 4 between the enalapril and sacubitril groups were significantly different. The test statistic suggests NT-proBNP levels are higher in enalapril group.
___________________________

Hypothesis testing (6): </br>
H0: there is no significant difference between the 8 week NT-proBNP levels between the enalapril and saculbitril-valsartan groups </br>
H1: there is a significant difference between the 8 week NT-proBNP levels between the enalapril and saculbitril-valsartan groups
"""

'''
segregating data in group 3 - enalapril and group 4 - sacubitril-valsartan
'''

#enalapril group:
group3 = h3df['Week 8 NT-proBNP (pg/mL)']

#sacubitril-valsartan group:
group4 = h1df['Week 8 NT-proBNP (pg/mL)']

#conducting levene test to assess equality of variance between the two groups
stats.levene(group3, group4)

"""Outliers: </br>
Since this is a sample that has been selected through strict inclusion criteria, we will assume that outliers are a result of natural variation and not confounding factors. </br>
Therefore, outliers will not be removed for analysis.
"""

'''
Sample size is large enough to meet requirements of CLT and therefore, we will assume noramlity in the both groups.
Therefore, we will proceed with a parametric test

Levene test results suggest that the variances between the two groups are not equal.
Therefore we will proceed with the Welch's T test instead of standard independent T test
'''

#using two sided as hypothesis states difference broadly
stat6, pvalue6 = stats.ttest_ind(group3, group4, equal_var=False)

#checking one sided
stats.ttest_ind(group3, group4, alternative='greater', equal_var=False)

#saving results
results6 = pd.DataFrame({'Statistic':[stat6], 'P-value':[pvalue6]})
results6.to_csv('/content/Statistics/result6.csv')

"""Result 6: </br>
The NT-proBNP levels at week 8 between the enalapril and sacubitril groups were significantly different. The test statistic suggests NT-proBNP levels are higher in enalapril group.
__________________________

Hypothesis testing (7): </br>
H0: there is no significant difference between the 4 week NT-proBNP levels between the enalapril and saculbitril-valsartan groups among patients 60 years and older </br>
H1: there is a significant difference between the 4 week NT-proBNP levels between the enalapril and saculbitril-valsartan groups among patients 60 years and older
"""

#segregating data

#group for 60 years and older given enalapril
group5 = h3df.loc[h3df['Age'] >= 60]['Week 4 NT-proBNP (pg/mL)']

#group for 60 years and older given sacubitril-valsartan
group6 = h1df.loc[h1df['Age'] >= 60]['Week 4 NT-proBNP (pg/mL)']

#conducting levene test to assess equality of variance between the two groups
stats.levene(group5, group6)

"""Outliers: </br>
Since this is a sample that has been selected through strict inclusion criteria, we will assume that outliers are a result of natural variation and not confounding factors. </br>
Therefore, outliers will not be removed for analysis.
"""

'''
Sample size is large enough to meet requirements of CLT and therefore, we will assume noramlity in the both groups.
Therefore, we will proceed with a parametric test

Levene test results suggest that the variances between the two groups are equal.
Therefore we will proceed with the standard independent T test
'''

#using two sided as hypothesis states difference broadly
stat7, pvalue7 = stats.ttest_ind(group5, group6, equal_var=True)

#checking one sided
stats.ttest_ind(group5, group6, alternative='greater', equal_var=True)

#saving results
results7 = pd.DataFrame({'Statistic':[stat7], 'P-value':[pvalue7]})
results7.to_csv('/content/Statistics/result7.csv')

"""Result 7: </br>
The NT-proBNP levels at week 4 between the enalapril and sacubitril groups among patients 60 years or older were significantly different. The test statistic suggests NT-proBNP levels are higher in enalapril group.</br>
__________________

Hypothesis testing (8): </br>
H0: there is no significant difference between the 8 week NT-proBNP levels between the enalapril and saculbitril-valsartan groups among patients 60 years and older </br>
H1: there is a significant difference between the 8 week NT-proBNP levels between the enalapril and saculbitril-valsartan groups among patients 60 years and older
"""

#segregating data

#group for 60 years and older given enalapril
group7 = h3df.loc[h3df['Age'] >= 60]['Week 8 NT-proBNP (pg/mL)']

#group for 60 years and older given sacubitril-valsartan
group8 = h1df.loc[h1df['Age'] >= 60]['Week 8 NT-proBNP (pg/mL)']

"""Outliers: </br>
Since this is a sample that has been selected through strict inclusion criteria, we will assume that outliers are a result of natural variation and not confounding factors. </br>
Therefore, outliers will not be removed for analysis.
"""

#conducting levene test to assess equality of variance between the two groups
stats.levene(group7, group8)

'''
Sample size is large enough to meet requirements of CLT and therefore, we will assume noramlity in the both groups.
Therefore, we will proceed with a parametric test

Levene test results suggest that the variances between the two groups are not equal.
Therefore we will proceed with the Welch's T test
'''

#using two sided as hypothesis states difference broadly
stat8, pvalue8 = stats.ttest_ind(group7, group8, equal_var=False)

#checking one sided
stats.ttest_ind(group7, group8, alternative='greater', equal_var=False)

#saving results
results8 = pd.DataFrame({'Statistic':[stat8], 'P-value':[pvalue8]})
results8.to_csv('/content/Statistics/result8.csv')

"""Result 8: </br>
The NT-proBNP levels at week 8 between the enalapril and sacubitril groups among patients 60 years or older were significantly different. The test statistic suggests NT-proBNP levels are higher in enalapril group.</br>
__________

Summary of Results:</br>
Result 1 : </br>
In sacubitril group, the NT-proBNP levels were significantly different at baseline and week 4. The test statistic suggests that the week 4 levels were significantly lower than baseline</br>

Result 2: </br>
In sacubitril group, the NT-proBNP levels were significantly different at baseline and week 8. The test statistic suggests that the week 8 levels were significantly lower than baseline</br>

Result 3: </br>
In enalapril group, the NT-proBNP levels were significantly different at baseline and week 4. The test statistic suggests that the week 4 levels were significantly lower than baseline</br>

Result 4: </br>
In enalapril group, the NT-proBNP levels were significantly different at baseline and week 8. The test statistic suggests that the week 8 levels were significantly lower than baseline</br>

Result 5: </br>
The NT-proBNP levels at week 4 between the enalapril and sacubitril groups were significantly different. The test statistic suggests NT-proBNP levels are higher in enalapril group.</br>

Result 6: </br>
The NT-proBNP levels at week 8 between the enalapril and sacubitril groups were significantly different. The test statistic suggests NT-proBNP levels are higher in enalapril group.</br>

Result 7: </br>
The NT-proBNP levels at week 4 between the enalapril and sacubitril groups among patients 60 years or older were significantly different. The test statistic suggests NT-proBNP levels are higher in enalapril group.</br>

Result 8: </br>
The NT-proBNP levels at week 8 between the enalapril and sacubitril groups among patients 60 years or older were significantly different. The test statistic suggests NT-proBNP levels are higher in enalapril group.</br>

Adding readmes
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# cd Code
# cat > README.md
# This folder contains the colab notebook analysis as an .ipynb file </br>
# This folder also contains the code as .py file

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# cd Figures
# cat > README.md
# This folder contains the following figures:</br>
# </br>
# Fig.1. Comparison of baseline NT-proBNP and baseline BNP levels among men and women by treatment group</br>
#   Fig.1.a. Baseline NT-proBNP among men and women by treatment group (plot type: plit violinplot)</br>
#   Fig.1.b. Baseline BNP among men and women by treatment group (plot type: plit violinplot)</br>
# </br>
# Fig.2. Comparison of baseline NT-proBNP and baseline BNP levels among patients with and without prior use of ACEi/ARB by treatment group </br>
#   Fig.2.a. Baseline NT-proBNP with and without prior use of ACEi/ARB by treatment group (plot type: strip plot imposed on boxplot)</br>
#   Fig.2.b. Baseline BNP with and without prior use of ACEi/ARB by treatment group (plot type: strip plot imposed on boxplot)</br>
# </br>
# Fig.3. Change in NT-proBNP from baseline at 4 weeks and 8 weeks after treatment with either enalapril or sacubitril-valsartan (plot type: line plot)</br>
# </br>
# Fig.4. Heatmap comparison of NT-proBNP levels at 8 weeks after treatment in different weight groups by treatment group (plot type: heatmap)</br>

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# cd Starting_Data
# cat > README.md
# This folder contains the main three (3) dataframes used for analysis</br>
# </br>
# 1. Rawdata.csv - a copy of the raw, unchanged data loaded for all downstream processes and analyses</br>
# </br>
# 2. NaNsremoved.csv - a cleanded version of the data where all NaN values are removed from the raw data by dropping all rows with at least one(1) NaN value</br>
# </br>
# 3. DataincludedperIC.csv - a version of the data including only those rows/entries that meet the Inclusion Criteria for analysis</br>
# </br>
# Inclusion Criteria used:</br>
# a. age >= 18</br>
# b. pre-treatment NT-proBNP >= 1600 pg/mL</br>
# c. pre-treatment BNP >= 400 pg/mL</br>
# d. left ventricular ejection fraction <= 40%

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# cd Statistics
# cat > README.md
# This folder contains statistical analyses outputs saved to .csv:</br>
# </br>
# 1. median_mean_std_treatmentgroup.csv - contains the median, mean and standard deviations of all continuous data grouped by treatment group (enalapril vs sacubitril-valsartan)</br>
# </br>
# 2. result1 - statistic and p-value (alpha = 0.05)</br>
# comparison groups: NT-proBNP at baseline and 4 weeks in the sacubitril-valsartan group.</br>
# test used - Wilcoxon sign-rank test (non-parametric)</br>
# </br>
# 3. results2 - statistic and p-value (alpha = 0.05)</br>
# comparison groups: NT-proBNP at baseline and 8 weeks in the sacubitril-valsartan group.</br>
# test used - Wilcoxon sign-rank test (non-parametric)</br>
# </br>
# 4. results3 - statistic and p-value (alpha = 0.05)</br>
# comparison groups: NT-proBNP at baseline and 4 weeks in the enalapril group.</br>
# test used - Wilcoxon sign-rank test (non-parametric)</br>
# </br>
# 5. results4 - statistic and p-value (alpha = 0.05)</br>
# comparison groups: NT-proBNP at baseline and 8 weeks in the enalapril group.</br>
# test used - Wilcoxon sign-rank test (non-parametric)</br>
# </br>
# 6. results5 - statistic and p-value (alpha = 0.05)</br>
# comparison groups: NT-proBNP at 4 weeks in the enalapril group vs sacubitril-valsartan group.</br>
# test used - Mann Whitney U test (non-parametric)</br>
# </br>
# 7. results6 - statistic and p-value (alpha = 0.05)</br>
# comparison groups: NT-proBNP at 8 weeks in the enalapril group vs sacubitril-valsartan group.</br>
# test used - Mann Whitney U test (non-parametric)</br>
# </br>
# 8. results7 - statistic and p-value (alpha = 0.05)</br>
# comparison groups: NT-proBNP at 4 weeks in the enalapril group vs sacubitril-valsartan group among patients 60 years and older</br>
# test used - Mann Whitney U test (non-parametric)</br>
# </br>
# 9. results8 - statistic and p-value (alpha = 0.05)</br>
# comparison groups: NT-proBNP at 8 weeks in the enalapril group vs sacubitril-valsartan group among patients 60 years and older</br>
# test used - Mann Whitney U test (non-parametric)
#

"""Setting Identity"""

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# git config --global user.email "divgi@usc.edu"
# git config --global user.name "KDivgi"

# Commented out IPython magic to ensure Python compatibility.
# #adding files
# %%bash
# git add -A

# Commented out IPython magic to ensure Python compatibility.
# #commiting files
# %%bash
# git commit -m 'Updated the hypothesis testing section per feedback - changes reflected in statistics'

"""Generating keys"""

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# ssh-keygen -t ed25519 -C 'divgi@usc.edu' -f ~/.ssh/id_ed25519 -P ''
# cat > ~/.ssh/config
# Host *
#   AddKeysToAgent yes
#   IdentityFile ~/.ssh/id_ed25519

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# eval "$(ssh-agent -s)"
# ssh-add ~/.ssh/id_ed25519

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# cat ~/.ssh/id_ed25519.pub

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# ssh -o "StrictHostKeyChecking no" -T git@github.com | exit 0

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# git remote add origin git@github.com:KDivgi/CXPT-501-Final-Project.git
# git branch -M main
# git push -u origin main

"""GitHub repo Link:</br>
https://github.com/KDivgi/CXPT-501-Final-Project.git
"""